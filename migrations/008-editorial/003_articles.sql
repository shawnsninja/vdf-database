-- =====================================================================================
-- VDF Database - Module 8: Editorial (Platform Content)
-- Migration: 003_articles.sql
-- Description: Create articles table for general content (news, blog posts, etc.)
-- Dependencies: 
--   - Module 1 (profiles, media)
--   - Module 2 (trails)
--   - Module 3 (regions, towns)
--   - content_visibility_status_enum
-- Version: 1.0
-- =====================================================================================

-- Ensure content_visibility_status_enum exists (should be created in Module 1)
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'content_visibility_status_enum') THEN
        CREATE TYPE public.content_visibility_status_enum AS ENUM (
            'draft', 
            'pending_review', 
            'published', 
            'archived', 
            'private_link'
        );
    END IF;
END $$;

-- Table: public.articles
-- Purpose: Stores general content articles like news, platform updates, or blog-style posts
CREATE TABLE public.articles (
    id bigint NOT NULL GENERATED ALWAYS AS IDENTITY,
    title text NOT NULL,
    slug text NOT NULL,
    body_content text NOT NULL,
    excerpt text NULL,
    author_profile_id uuid NULL,
    publication_date timestamp with time zone NULL,
    article_status public.content_visibility_status_enum NOT NULL DEFAULT 'draft'::public.content_visibility_status_enum,
    featured_image_media_id uuid NULL,
    associated_trail_id bigint NULL,
    associated_region_id bigint NULL,
    associated_town_id bigint NULL,
    tags text[] NULL,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    updated_at timestamp with time zone NOT NULL DEFAULT now(),
    created_by_profile_id uuid NULL,
    updated_by_profile_id uuid NULL,
    deleted_at timestamp with time zone NULL,
    
    CONSTRAINT articles_pkey PRIMARY KEY (id),
    CONSTRAINT articles_slug_key UNIQUE (slug),
    CONSTRAINT articles_title_length CHECK (char_length(title) > 0 AND char_length(title) <= 255),
    CONSTRAINT articles_slug_format CHECK (
        slug ~ '^[a-z0-9]+(?:-[a-z0-9]+)*$' AND 
        char_length(slug) > 0 AND 
        char_length(slug) <= 255
    ),
    CONSTRAINT articles_excerpt_length CHECK (
        excerpt IS NULL OR 
        (char_length(excerpt) > 0 AND char_length(excerpt) <= 500)
    ),
    CONSTRAINT articles_author_profile_id_fkey 
        FOREIGN KEY (author_profile_id) REFERENCES public.profiles(id) ON DELETE SET NULL,
    CONSTRAINT articles_featured_image_media_id_fkey 
        FOREIGN KEY (featured_image_media_id) REFERENCES public.media(id) ON DELETE SET NULL,
    CONSTRAINT articles_associated_trail_id_fkey 
        FOREIGN KEY (associated_trail_id) REFERENCES public.trails(id) ON DELETE SET NULL,
    CONSTRAINT articles_associated_region_id_fkey 
        FOREIGN KEY (associated_region_id) REFERENCES public.regions(id) ON DELETE SET NULL,
    CONSTRAINT articles_associated_town_id_fkey 
        FOREIGN KEY (associated_town_id) REFERENCES public.towns(id) ON DELETE SET NULL,
    CONSTRAINT articles_created_by_profile_id_fkey 
        FOREIGN KEY (created_by_profile_id) REFERENCES public.profiles(id) ON DELETE SET NULL,
    CONSTRAINT articles_updated_by_profile_id_fkey 
        FOREIGN KEY (updated_by_profile_id) REFERENCES public.profiles(id) ON DELETE SET NULL
);

-- Comments
COMMENT ON TABLE public.articles IS 'Stores general content articles like news, platform updates, or blog-style posts. Module 8. Version 1.0.';
COMMENT ON COLUMN public.articles.id IS 'PK. Unique article identifier.';
COMMENT ON COLUMN public.articles.title IS 'Article title. Max 255 chars. (Translatable via public.translations)';
COMMENT ON COLUMN public.articles.slug IS 'URL-friendly slug, unique, lowercase, alphanumeric with hyphens. Max 255 chars. Generated by application logic.';
COMMENT ON COLUMN public.articles.body_content IS 'Main content of the article (e.g., Markdown, HTML). (Translatable via public.translations)';
COMMENT ON COLUMN public.articles.excerpt IS 'Short summary or excerpt. Max 500 chars. (Translatable via public.translations)';
COMMENT ON COLUMN public.articles.author_profile_id IS 'FK to profiles.id. Author of the article.';
COMMENT ON COLUMN public.articles.publication_date IS 'Timestamp when the article is/was published. Nullable for drafts or if not yet determined.';
COMMENT ON COLUMN public.articles.article_status IS 'Lifecycle status using content_visibility_status_enum (e.g., draft, published, archived). Default is draft.';
COMMENT ON COLUMN public.articles.featured_image_media_id IS 'FK to media.id. Optional featured image for the article.';
COMMENT ON COLUMN public.articles.associated_trail_id IS 'FK to trails.id. Optional link to a specific trail.';
COMMENT ON COLUMN public.articles.associated_region_id IS 'FK to regions.id. Optional link to a specific region.';
COMMENT ON COLUMN public.articles.associated_town_id IS 'FK to towns.id. Optional link to a specific town.';
COMMENT ON COLUMN public.articles.tags IS 'Array of keywords for categorization or searching articles.';
COMMENT ON COLUMN public.articles.created_at IS 'Timestamp of article record creation.';
COMMENT ON COLUMN public.articles.updated_at IS 'Timestamp of last article record update (auto-updated by trigger).';
COMMENT ON COLUMN public.articles.created_by_profile_id IS 'Profile ID of the user who created the article record. FK to profiles.id.';
COMMENT ON COLUMN public.articles.updated_by_profile_id IS 'Profile ID of the user who last updated the article record. FK to profiles.id.';
COMMENT ON COLUMN public.articles.deleted_at IS 'Timestamp for soft deletion. Filters should exclude records where deleted_at IS NOT NULL.';

-- Indexes
CREATE INDEX idx_articles_slug ON public.articles (slug);
CREATE INDEX idx_articles_author_profile_id ON public.articles (author_profile_id) WHERE author_profile_id IS NOT NULL;
CREATE INDEX idx_articles_publication_date ON public.articles (publication_date DESC NULLS LAST) WHERE publication_date IS NOT NULL;
CREATE INDEX idx_articles_status ON public.articles (article_status);
CREATE INDEX idx_articles_featured_image_media_id ON public.articles (featured_image_media_id) WHERE featured_image_media_id IS NOT NULL;
CREATE INDEX idx_articles_associated_trail_id ON public.articles (associated_trail_id) WHERE associated_trail_id IS NOT NULL;
CREATE INDEX idx_articles_associated_region_id ON public.articles (associated_region_id) WHERE associated_region_id IS NOT NULL;
CREATE INDEX idx_articles_associated_town_id ON public.articles (associated_town_id) WHERE associated_town_id IS NOT NULL;
CREATE INDEX idx_articles_tags ON public.articles USING GIN (tags) WHERE tags IS NOT NULL;
CREATE INDEX idx_articles_created_by_profile_id ON public.articles (created_by_profile_id) WHERE created_by_profile_id IS NOT NULL;
CREATE INDEX idx_articles_updated_by_profile_id ON public.articles (updated_by_profile_id) WHERE updated_by_profile_id IS NOT NULL;
CREATE INDEX idx_articles_deleted_at ON public.articles (deleted_at) WHERE deleted_at IS NOT NULL;

-- Trigger
CREATE TRIGGER on_articles_updated_at 
    BEFORE UPDATE ON public.articles 
    FOR EACH ROW 
    EXECUTE FUNCTION public.handle_updated_at();

-- Trigger function to clean up related translations on delete
CREATE OR REPLACE FUNCTION public.cleanup_articles_translations() 
RETURNS TRIGGER AS $$
BEGIN
    DELETE FROM public.translations
    WHERE table_identifier = 'articles'
    AND column_identifier IN ('title', 'body_content', 'excerpt')
    AND row_foreign_key = OLD.id::text;
    RETURN OLD;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

COMMENT ON FUNCTION public.cleanup_articles_translations() IS 'Removes related entries from public.translations for title, body_content, and excerpt when an article is deleted. Runs as SECURITY DEFINER.';

-- Apply the cleanup trigger for translations
CREATE TRIGGER trigger_cleanup_articles_translations_after_delete
    AFTER DELETE ON public.articles
    FOR EACH ROW
    EXECUTE FUNCTION public.cleanup_articles_translations();

COMMENT ON TRIGGER trigger_cleanup_articles_translations_after_delete ON public.articles IS 'After an article is deleted, removes its associated translations from the public.translations table.';

-- RLS Policies
ALTER TABLE public.articles ENABLE ROW LEVEL SECURITY;

-- Public can read published articles
CREATE POLICY "Public can read published articles" ON public.articles 
    FOR SELECT TO authenticated, anon 
    USING (
        article_status = 'published'::public.content_visibility_status_enum 
        AND deleted_at IS NULL
    );

-- Authors can manage their own draft or pending articles
CREATE POLICY "Authors can manage their own draft or pending articles" ON public.articles 
    FOR ALL TO authenticated 
    USING (
        author_profile_id = auth.uid() 
        AND article_status IN ('draft'::public.content_visibility_status_enum, 'pending_review'::public.content_visibility_status_enum) 
        AND deleted_at IS NULL
    )
    WITH CHECK (
        author_profile_id = auth.uid() 
        AND article_status IN ('draft'::public.content_visibility_status_enum, 'pending_review'::public.content_visibility_status_enum)
    );

-- Admins and content managers can manage all articles
CREATE POLICY "Admins and content managers can manage all articles" ON public.articles 
    FOR ALL TO authenticated 
    USING (
        public.has_role('admin_platform') 
        OR public.has_role('regional_content_manager')
    )
    WITH CHECK (
        public.has_role('admin_platform') 
        OR public.has_role('regional_content_manager')
    );